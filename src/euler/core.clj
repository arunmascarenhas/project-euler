(ns euler.core
  (:require [euler.common :as common]))

;; If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
;; Find the sum of all the multiples of 3 or 5 below 1000.
(defn euler-1 []
  (reduce + (filter #(or (zero? (mod % 3))
                         (zero? (mod % 5)))
                    (take-while (partial > 1000)
                                common/natural-numbers))))

;; Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
;;     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;;By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
(defn euler-2 []
  (reduce + (filter even?
                    (take-while (partial > 4000001)
                                common/fib))))

;; The prime factors of 13195 are 5, 7, 13 and 29.
;; What is the largest prime factor of the number 600851475143 ?
(defn euler-3 []
  (apply max (common/prime-factors 600851475143)))

;; 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
;; What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
(defn divisible-by-all? [x nums]
  (not-any? (fn [y]
              (pos? (rem x y)))
            nums))

(defn euler-5 []
  (take 1 (filter #(divisible-by-all? % 
                                      (take-while (partial > 21))) 
                  (iterate inc 1))))

;; By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
;; What is the 10 001st prime number?
(defn euler-7 []
  (last (take 10001 common/primes)))

;; The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
;; Find the sum of all the primes below two million.
(defn euler-10 []
  (reduce + (take-while (partial > 2000000) common/primes)))

